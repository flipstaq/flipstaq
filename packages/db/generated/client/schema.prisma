// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  HIGHER_STAFF
  STAFF
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  PENDING_VERIFICATION
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String         @unique
  firstName     String
  lastName      String
  password      String // Hashed password
  dateOfBirth   DateTime
  country       String
  role          UserRole       @default(USER)
  status        UserStatus     @default(ACTIVE)
  isActive      Boolean        @default(true)
  deletedAt     DateTime? // Soft delete timestamp
  deletedById   String? // ID of admin who deleted this user
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // Relations
  refreshTokens RefreshToken[]
  products      Product[]
  favorites     Favorite[]

  // Self-referential relation for deletion tracking
  deletedBy    User?  @relation("UserDeletions", fields: [deletedById], references: [id])
  deletedUsers User[] @relation("UserDeletions")

  // Indexes for performance
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Product {
  id          String     @id @default(cuid())
  title       String
  description String?
  category    String?
  price       Float
  currency    String     @default("USD")
  location    String // Country or "Global"
  slug        String // User-chosen URL part
  imageUrl    String? // Product image URL
  userId      String
  isActive    Boolean    @default(true)
  isSold      Boolean    @default(false) // New field for marking products as sold
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]

  // Unique constraint for slug per user
  @@unique([userId, slug])
  @@map("products")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}
